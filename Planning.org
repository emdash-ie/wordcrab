* Current situation
  There’s a Haskell app which runs a two-player game in the terminal with a
  basic TUI. The game never ends correctly (though the tiles will run out), and
  some features haven’t been implemented (e.g. exchanging tiles, passing, the
  bonus for using all your tiles). There are also some small scoring bugs.
* Next steps
** Possible: Split up existing Haskell into client and server
   Seems like a good intermediate step before a non-Haskell client, helps to
   figure out the API for the web communication.
*** Single client
**** DONE Make a client program that talks to the new server
     This should be the ~brick~ program but using a ~Backend~ value that talks
     to the server (~Backend IO~ or something?)
*** Multiple clients
** Web client communicating with Haskell server
   I’m thinking either Purescript or Elm for the client.

   For the communication, I’d like to have an ~actions~ field in the data sent
   by the server, which tells the client what actions they can take at the
   moment to change the state, by providing URLs to perform those actions (and
   maybe indication on what the gaps should be filled with).
** Event sourcing
   The more I think about it the more I like this idea. Allows for retries if
   the frontend misses an update from the backend – frontend tells the backend
   “this is the last event I saw”, and the backend constructs a diff/sequence
   of events from there forward to send to the frontend. (Probably can just
   be the sequence of events, since I can’t think of meaningful undoable
   actions right now. Undoing a turn if all players agree seems cool, but not
   fundamental.) Also would be good to put the state in a db so not
   everything is lost if the program crashes or etc.
** More game features
*** Winning/losing
*** Bonus for using all your tiles
*** Passing
*** Swapping tiles with the bag
*** Challenging incorrect plays
** Waiting room, multiple games, etc.
** Haskell GUI client
   Not a huge priority, but might be a nice thing to work on
** Experiments
*** Code structures, e.g. MTL, free monads
*** Generate client javascript from Haskell somehow
    GHCJS or polysemy?
*** Recursion schemes
    I’m /sure/ I could use them somewhere :grin: Especially since I read that
    different coalgebras can represent different classes of automata, e.g.
    finite state automata or tree automata.
